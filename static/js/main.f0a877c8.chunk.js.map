{"version":3,"sources":["Calculator.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","props","state","value","rate","mortgage","term","handleInputChange","bind","event","target","type","checked","name","this","setState","payment","mortgageJs","calculatePayment","rows","i","paymentSchedule","length","push","paymentRows","getPaymentRows","entries","index","className","balance","toFixed","totalInterest","totalPayments","renderRows","renderResults","htmlFor","required","min","onChange","placeholder","step","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f0a877c8.chunk.js","sourcesContent":["import React from 'react';\nimport mortgageJs from 'mortgage-js';\n\nimport './Calculator.scss';\n\nclass Calculator extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {value: '', rate: '', mortgage: '', term: ''};\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n  }\n\n  handleInputChange(event) {\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    this.setState({\n      [name]: value\n    });\n  }\n\n  getPaymentRows() {\n    const payment = mortgageJs.calculatePayment(this.state.value, this.state.value - this.state.mortgage, this.state.rate / 100, this.state.term * 12);\n    const rows = [];\n    for (let i = 11; i < payment.paymentSchedule.length; i = i + 12) {\n      rows.push(payment.paymentSchedule[i]);\n    }\n\n    return rows;\n  }\n\n  renderRows() {\n    const paymentRows = this.getPaymentRows();\n    const rows = [];\n    for (const [index, value] of paymentRows.entries()) {\n      rows.push(\n        <tr key={index}>\n          <td>{index + 1}</td>\n          <td className=\"numeric\">{value.balance.toFixed(2)}</td>\n          <td className=\"numeric\">{(this.state.value - value.balance).toFixed(2)}</td>\n          <td className=\"numeric\">{value.totalInterest.toFixed(2)}</td>\n          <td className=\"numeric\">{value.totalPayments.toFixed(2)}</td>\n          <td className=\"numeric\">{(100 * (this.state.value - value.balance) / this.state.value).toFixed(0)}</td>\n        </tr>\n      );\n    }\n\n    return rows;\n  }\n\n  renderResults() {\n    if (!this.state.value || !this.state.rate || !this.state.mortgage || !this.state.term) {\n      return <p>Fill in all the fields in \"Your Details\" to see your results.</p>\n    }\n\n    return (\n      <table>\n        <thead>\n        <tr>\n          <th>Year</th>\n          <th>Mortgage remaining</th>\n          <th>Value Owned</th>\n          <th>Interest Paid To Date</th>\n          <th>Payments Total</th>\n          <th>% Owned</th>\n        </tr>\n        </thead>\n        <tbody>\n        {this.renderRows()}\n        </tbody>\n      </table>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"calculator\">\n        <div className=\"results\">\n          {this.renderResults()}\n        </div>\n        <div className=\"details\">\n          <h2>Your Details</h2>\n          <div>\n            <label htmlFor=\"value\">Home Value</label>\n            <input required type=\"number\" min=\"0\" onChange={this.handleInputChange} name=\"value\" placeholder=\"234853\" />\n          </div>\n          <div>\n            <label htmlFor=\"rate\">Interest Rate</label>\n            <input required type=\"number\" min=\"0\" onChange={this.handleInputChange} name=\"rate\" placeholder=\"4.19\" step=\"any\"/>\n          </div>\n          <div>\n            <label htmlFor=\"mortgage\">Mortgage Amount</label>\n            <input required type=\"number\" min=\"0\" onChange={this.handleInputChange} name=\"mortgage\" placeholder=\"176139\"/>\n          </div>\n          <div>\n            <label htmlFor=\"term\">Mortgage Term</label>\n            <input required type=\"number\" min=\"0\" onChange={this.handleInputChange} name=\"term\" placeholder=\"25\"/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Calculator;\n","import React from 'react';\nimport Calculator from './Calculator';\nimport './App.scss';\n\nfunction App() {\n  return (\n    <>\n      <div className=\"main\">\n        <header>\n          <h1>Amortisation Calculator</h1>\n          <p>Find how much of your home you will own and when.</p>\n        </header>\n        <Calculator/>\n        <div className=\"assumptions\">\n          <p>This site is for illustration purposes only and should not be relied on as a source of truth. The calculator makes several assumptions:</p>\n          <ul>\n            <li>The mortgage is a repayment mortgage.</li>\n            <li>No overpayments are made.</li>\n            <li>The property does not get revalued during the mortgage period.</li>\n            <li>No payments have been missed.</li>\n            <li>The interest rate is constant for the duration of the mortgage.</li>\n          </ul>\n        </div>\n      </div>\n      <footer>\n        <p>Created by <a href=\"https://votemike.co.uk\">Michael Gwynne</a></p>\n        <p>You may like <a href=\"https://votemike.github.io/stress-test/\">property stress test</a></p>\n      </footer>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}